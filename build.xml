<?xml version="1.0" encoding="UTF-8"?>

<project name="drupal_build" default="build" phingVersion="2.6.1"
  description="Drupal build.xml. It handels install and update of drupal projects and other common tasks">
  <target name="build" depends="init"
    description="Target will try to update the project or it will try to checkout it if the one does not exist">

  </target>

  <target name="init" depends="properties-load" unless="targets.init.done"
    hidden="true">
    <!-- Include phing extensions -->
    <includepath classpath="phing_ext" />
    <taskdef name="drush" classname="DrushTask" />

    <!-- Init project properties -->
    <property name="project.tmp" value="${project.basedir}/tmp" />
    <property name="project.www" value="${project.basedir}/www" />
    <php function="time" returnProperty="project.timestamp" />

    <!-- Init drush task properties -->
    <property name="drush.root" value="${project.www}" />

    <!-- Create working dirs -->
    <mkdir dir="${project.basedir}/tmp" mode="0775" />
    <mkdir dir="${project.basedir}/www" mode="0775" />

    <property name="targets.init.done" value="true" />
  </target>

  <!-- Load property files -->
  <target name="properties-load" unless="targets.properties-load.done"
    hidden="true">

    <!-- By default use default properties file `build.default.properties` -->
    <property file="${project.basedir}/build.default.properties"
      override="true" />

    <!-- Allow override using `build.properties` in build file directory -->
    <!-- Include the file after each standard properties file -->
    <property file="${project.basedir}/build.properties"
      override="true" />

    <!-- Allow override using `build.env.properties` in build file directory 
      based on the environment -->
    <property file="${project.basedir}/build.${project.env}.properties"
      override="true" />

    <!-- Allow override using `build.properties` in build file directory -->
    <!-- Include the file after each standard properties file -->
    <property file="${project.basedir}/build.properties"
      override="true" />

    <!-- Set property to prevent unnecessary additional invocations of this 
      target -->
    <property name="targets.properties-load.done" value="true" />
  </target>

  <target name="project-create" depends="init"
    unless="targets.project-create.done" description="Initialize a new project">
    <phingcall target="clean" />

    <!-- Create working dirs -->
    <mkdir dir="${project.basedir}/tmp" mode="0775" />

    <drush command="pm-download" assume="yes">
      <option name="drupal-project-rename" value="www" />
      <param>drupal</param>
    </drush>

    <mkdir dir="${project.www}/sites/all/modules/contrib" mode="0775" />
    <touch file="${project.www}/sites/all/modules/contrib/README.txt" />
    <mkdir dir="${project.www}/sites/all/modules/custom" mode="0775" />
    <touch file="${project.www}/sites/all/modules/custom/README.txt" />
    <mkdir dir="${project.www}/sites/all/modules/features" mode="0775" />
    <touch file="${project.www}/sites/all/modules/features/README.txt" />

    <chmod file="${project.www}/sites/default/default.settings.php"
      mode="0775" failonerror="true" />

    <drush command="pm-download" assume="yes">
      <param>devel</param>
    </drush>
    <drush command="pm-download" assume="yes">
      <param>features</param>
    </drush>

    <phingcall target="project-create-profile" />

    <gitinit repository="${project.www}" gitPath="${system.git}" />
    <gitcheckout repository="${project.www}" branchname="${drupal.repo_branch}"
      create="true" gitPath="${system.git}" />
    <exec level="info" dir="${project.www}" checkreturn="true"
      passthru="true" command="${system.git} add ." />
    <gitcommit repository="${project.www}" message="Init project"
      allFiles="true" gitPath="${system.git}" />

    <exec level="info" dir="${project.www}" checkreturn="true"
      passthru="true" command="${system.git} remote add origin ${drupal.repo_url}" />

    <gitpush repository="${project.www}"
      refspec="${drupal.repo_branch}:${drupal.repo_branch}" destination="${drupal.repo_url}"
      gitPath="${system.git}" />

    <gitfetch repository="${project.www}" gitPath="${system.git}"
      all="true" />

    <exec level="info" dir="${project.www}" checkreturn="true"
      passthru="true"
      command="${system.git} branch --set-upstream-to=origin/${drupal.repo_branch} ${drupal.repo_branch}" />


    <property name="targets.project-create.done" value="true" />
  </target>

  <target name="project-create-profile" depends="init"
    unless="targets.project-create-profile.done" description="Create a custom profile based on Standard Drupal profile">

    <copy todir="${project.www}/profiles/${drupal.profile}">
      <fileset dir="${project.www}/profiles/standard">
        <include name="**" />
      </fileset>
      <filterchain>
        <replaceregexp>
          <regexp pattern="standard_" replace="${drupal.profile}_" />
          <regexp pattern="name = Standard" replace="name = ${drupal.profile}" />
        </replaceregexp>
      </filterchain>
    </copy>
    <move todir="${project.www}/profiles/${drupal.profile}">
      <fileset dir="${project.www}/profiles/${drupal.profile}">
        <include name="*" />
      </fileset>
      <mapper type="regexp" from="^standard.([a-z]+)$" to="${drupal.profile}.\1" />
    </move>

    <property name="targets.project-create-profile.done" value="true" />
  </target>

  <target name="clean" depends="init" unless="targets.clean.done"
    description="Clean all project files and directories">
    <property name="clean.trash-folder"
      value="${system.tmp}/phing_clean_tmp_trash_${project.timestamp}" />
    <mkdir dir="${clean.trash-folder}" mode="0775" />

    <exec level="info" command="mv ${project.www} ${clean.trash-folder}" />
    <exec level="info" command="mv ${project.tmp} ${clean.trash-folder}" />

    <delete dir="${clean.trash-folder}" includeemptydirs="true"
      quiet="true" />

    <property name="targets.clean.done" value="true" />
  </target>

  <target name="clean-tmp" depends="init" unless="targets.clean-tmp.done"
    description="Clean tmp project files and directories">
    <property name="clean.trash-folder"
      value="${system.tmp}/phing_clean_tmp_trash_${project.timestamp}" />
    <mkdir dir="${clean.trash-folder}" mode="0775" />

    <exec level="info" command="mv ${project.tmp} ${clean.trash-folder}" />

    <delete dir="${clean.trash-folder}" includeemptydirs="true"
      quiet="true" />

    <property name="targets.clean-tmp.done" value="true" />
  </target>

  <target name="site-setup" depends="init" unless="targets.site-setup.done"
    description="Checkout the code and install the site">
    <phingcall target="clean" />
    <phingcall target="site-checkout" />
    <phingcall target="site-install" />

    <property name="targets.site-setup.done" value="true" />
  </target>

  <target name="site-update" depends="init" unless="targets.site-update.done"
    description="Update the web site">
    <gitpull repository="${project.www}" gitPath="${system.git}" />
    <drush command="updatedb" assume="yes" />
    <drush command="pm-enable" assume="yes">
      <param>${drupal.profile}</param>
    </drush>
    <phingcall target="drush-fr-all" />

    <property name="targets.site-update.done" value="true" />
  </target>

  <target name="site-install" depends="init" unless="targets.site-install.done"
    description="Install the web site">
    <drush command="site-install" assume="yes"
      haltonerror="${drupal.site-install.haltonerror}">
      <option name="db-url" value="${drupal.db.url}" />
      <option name="locale" value="${drupal.locale}" />
      <option name="site-name" value="${drupal.sitename}" />
      <option name="account-pass" value="${drupal.account.pass}" />
      <option name="strict" value="'0'" />
      <param>${drupal.profile}</param>
    </drush>

    <drush command="pm-enable" assume="yes">
      <param>features</param>
    </drush>
    <phingcall target="env-setup" />

    <!-- Fix permissions for the default site directory and settings. The 
      owner must be able to delete the directories during subsequent builds. -->
    <chmod mode="0777">
      <fileset dir="${project.www}/sites/default"
        defaultexcludes="false">
        <include name="files/**" />
        <include name="files" />
        <exclude name="files/.htaccess" />
      </fileset>
    </chmod>

    <chmod mode="0775">
      <fileset dir="${project.www}/sites" defaultexcludes="false">
        <include name="default/default.settings.php" />
        <include name="default/settings.php" />
        <include name="default" />
      </fileset>
    </chmod>

    <property name="targets.site-install.done" value="true" />
  </target>

  <target name="site-checkout" depends="init"
    unless="targets.site-checkout.done" description="Checkout the site">
    <phingcall target="clean" />
    <gitclone repository="${drupal.repo_url}" targetPath="${project.www}" />

    <gitcheckout repository="${project.www}" branchname="${drupal.repo_branch}"
      gitPath="${system.git}" />
    <property name="targets.site-checkout.done" value="true" />
  </target>

  <target name="env-setup" depends="init" unless="project.env-setup"
    description="Enable environment specific settings">
    <if>
      <and>
        <isset property="env.modules" />
        <not>
          <equals arg1="${env.modules}" arg2="" />
        </not>
      </and>
      <then>
        <drush command="pm-enable" assume="yes">
          <param>${env.modules}</param>
        </drush>
      </then>
    </if>

    <property name="project.env-setup" value="true" />
  </target>

  <target name="drush-fr-all" depends="init" description="Revert all features">
    <drush command="features-revert-all" assume="yes">
      <param>${drupal.feature_exclude}</param>
    </drush>
  </target>

  <target name="project-upgrade-core" depends="init"
    description="Upgrade drupal core">

  </target>

  <target name="project-upgrade-module" depends="init"
    description="Upgrade drupal module">
    <propertyprompt propertyName="project.upgrade.module.name"
      promptText="Which module do you want to upgrade" defaultValue="devel" />

    <drush command="pm-info" returnProperty="project.upgrade.module.version">
      <option name="fields" value="version" />
      <option name="format" value="list" />
      <param>${project.upgrade.module.name}</param>
    </drush>
    <if>
      <istrue value="${project.upgrade.module.version}" />
      <then>
        <php
          expression="reset(explode('+', str_replace('-dev', '', '${project.upgrade.module.version}')));"
          returnProperty="project.upgrade.module.tag" />
        <php
          expression="end(explode('+', str_replace('-dev', '', '${project.upgrade.module.version}')));"
          returnProperty="project.upgrade.module.commits" />
        <if>
          <equals arg1="${project.upgrade.module.tag}" arg2="${project.upgrade.module.commits}" />
          <then>
            <property name="project.upgrade.module.commits"
              value="0" override="true" />
          </then>
        </if>

        <property name="project.upgrade.module.dir"
          value="${project.tmp}/upgrade/${project.timestamp}/${project.upgrade.module.name}" />
        <echo>Cloning...</echo>
        <gitclone
          repository="git://drupalcode.org/project/${project.upgrade.module.name}.git"
          targetPath="${project.upgrade.module.dir}" />
        <exec level="info" dir="${project.upgrade.module.dir}"
          checkreturn="true" passthru="true"
          command="${system.git} checkout `git rev-list HEAD ^${project.upgrade.module.tag} | tail -${project.upgrade.module.commits} |  head -1`" />

        <copy todir="${project.upgrade.module.dir}" overwrite="true">
          <fileset
            dir="${project.www}/sites/all/modules/contrib/${project.upgrade.module.name}">
            <include name="**" />
            <exclude name="LICENSE.txt" />
            <exclude name="**/*.info" />
          </fileset>
        </copy>

        <exec level="info" dir="${project.upgrade.module.dir}"
          checkreturn="true" passthru="true"
          command="${system.git} diff > ${project.upgrade.module.name}.patch " />

        <loadfile property="project.upgrade.module.patch"
          file="${project.upgrade.module.dir}/${project.upgrade.module.name}.patch" />

        <delete
          dir="${project.www}/sites/all/modules/contrib/${project.upgrade.module.name}"
          includeemptydirs="true" failonerror="true" />
        <drush command="pm-download">
          <option name="select" />
          <param>${project.upgrade.module.name}</param>
        </drush>

        <if>
          <istrue value="${project.upgrade.module.patch}" />
          <then>
            <exec level="info"
              dir="${project.www}/sites/all/modules/contrib/${project.upgrade.module.name}"
              checkreturn="true" passthru="true"
              command="${system.git} apply -v  ${project.upgrade.module.dir}/${project.upgrade.module.name}.patch " />
          </then>
        </if>

      </then>
      <else>
        <echo level="error">There is no such module found</echo>
      </else>
    </if>

  </target>

</project>
